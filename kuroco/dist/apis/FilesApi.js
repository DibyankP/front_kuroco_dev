/* tslint:disable */
/* eslint-disable */
import { __awaiter, __extends, __generator } from "tslib";
/**
 * Test
 * test
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
var usingModelsDescription = {};
var FilesApiRcmsApi1FilesUploadPostRequestDescription = (function (usingModelsDescription) { return "{\n    file: Blob;\n    outputFormat?: string;\n    lang?: string;\n    charset?: string;\n}"; })(usingModelsDescription);
/**
 * no description
 */
var FilesApi = /** @class */ (function (_super) {
    __extends(FilesApi, _super);
    function FilesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(FilesApi, "className", {
        get: function () {
            return 'FilesApi';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FilesApi, "infos", {
        get: function () {
            return [
                {
                    class: FilesApi,
                    url: "/rcms-api/1/files/upload",
                    requestMethodName: 'rcmsApi1FilesUploadPost',
                    requestRequiredParamSample: {
                        file: {},
                    },
                    requestParamInterfaceDescription: FilesApiRcmsApi1FilesUploadPostRequestDescription,
                },
            ];
        },
        enumerable: true,
        configurable: true
    });
    /**
     *  ### **Files::upload (v1)**
     */
    FilesApi.prototype.rcmsApi1FilesUploadPost = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var rcmsApi1FilesUploadPostRaw;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        rcmsApi1FilesUploadPostRaw = function (requestParameters) { return __awaiter(_this, void 0, void 0, function () {
                            var queryParameters, headerParameters, consumes, canConsumeForm, formParams, useForm, response;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (requestParameters === null || requestParameters === undefined) {
                                            throw new runtime.RequiredError('request parameter was null or undefined', [
                                                'request parameter was null or undefined when calling rcmsApi1FilesUploadPost.',
                                                'This method requires parameters even if defined parameters are all optional (not required).',
                                                'In case of that, please specify empty Object.',
                                                'e.g. rcmsApi1FilesUploadPost({})'
                                            ].join('\n'));
                                        }
                                        if (requestParameters.file === null || requestParameters.file === undefined) {
                                            throw new runtime.RequiredError('file', 'Required parameter requestParameters.file was null or undefined when calling rcmsApi1FilesUploadPost.');
                                        }
                                        queryParameters = {};
                                        if (requestParameters.outputFormat !== undefined) {
                                            queryParameters['_output_format'] = requestParameters.outputFormat;
                                        }
                                        if (requestParameters.lang !== undefined) {
                                            queryParameters['_lang'] = requestParameters.lang;
                                        }
                                        if (requestParameters.charset !== undefined) {
                                            queryParameters['_charset'] = requestParameters.charset;
                                        }
                                        headerParameters = {};
                                        if (this.configuration && this.configuration.apiKey) {
                                            headerParameters["X-RCMS-API-ACCESS-TOKEN"] = this.configuration.apiKey("X-RCMS-API-ACCESS-TOKEN"); // Token-Auth authentication
                                        }
                                        consumes = [
                                            { contentType: 'multipart/form-data' },
                                        ];
                                        canConsumeForm = runtime.canConsumeForm(consumes);
                                        useForm = false;
                                        // use FormData to transmit files using content-type "multipart/form-data"
                                        useForm = canConsumeForm;
                                        if (useForm) {
                                            formParams = new FormData();
                                        }
                                        else {
                                            formParams = new URLSearchParams();
                                        }
                                        if (requestParameters.file !== undefined) {
                                            formParams.append('file', requestParameters.file);
                                        }
                                        return [4 /*yield*/, this.request({
                                                path: "/rcms-api/1/files/upload",
                                                method: 'POST',
                                                headers: headerParameters,
                                                query: queryParameters,
                                                body: formParams,
                                            })];
                                    case 1:
                                        response = _a.sent();
                                        return [2 /*return*/, new runtime.JSONApiResponse(response)];
                                }
                            });
                        }); };
                        return [4 /*yield*/, rcmsApi1FilesUploadPostRaw(requestParameters)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return FilesApi;
}(runtime.BaseAPI));
export { FilesApi };
