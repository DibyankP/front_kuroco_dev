/* tslint:disable */
/* eslint-disable */
import { __awaiter, __extends, __generator } from "tslib";
/**
 * Test
 * test
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { InlineObject10Description, InlineObject10ToJSON, InlineObject11Description, InlineObject11ToJSON, InlineObject9Description, InlineObject9ToJSON, } from '../models';
var usingModelsDescription = {
    InlineObject10: InlineObject10Description.split('\n').map(function (str) { return "  " + str; }).join('\n'),
    InlineObject11: InlineObject11Description.split('\n').map(function (str) { return "  " + str; }).join('\n'),
    InlineObject9: InlineObject9Description.split('\n').map(function (str) { return "  " + str; }).join('\n'),
};
var CommentsApiRcmsApi1TopicsCommentsDeletePostRequestDescription = (function (usingModelsDescription) { return "{\n    inlineObject11: " + usingModelsDescription.InlineObject11 + ";\n    outputFormat?: string;\n    lang?: string;\n    charset?: string;\n}"; })(usingModelsDescription);
var CommentsApiRcmsApi1TopicsCommentsGetRequestDescription = (function (usingModelsDescription) { return "{\n    moduleId: Array<number>;\n    outputFormat?: string;\n    lang?: string;\n    charset?: string;\n    newOrderFlg?: number;\n    cnt?: number;\n    pageID?: number;\n    fromDate?: string;\n    toDate?: string;\n    groupBy?: string;\n    groupAs?: string;\n}"; })(usingModelsDescription);
var CommentsApiRcmsApi1TopicsCommentsInsertPostRequestDescription = (function (usingModelsDescription) { return "{\n    inlineObject9: " + usingModelsDescription.InlineObject9 + ";\n    outputFormat?: string;\n    lang?: string;\n    charset?: string;\n}"; })(usingModelsDescription);
var CommentsApiRcmsApi1TopicsCommentsUpdatePostRequestDescription = (function (usingModelsDescription) { return "{\n    inlineObject10: " + usingModelsDescription.InlineObject10 + ";\n    outputFormat?: string;\n    lang?: string;\n    charset?: string;\n}"; })(usingModelsDescription);
/**
 * no description
 */
var CommentsApi = /** @class */ (function (_super) {
    __extends(CommentsApi, _super);
    function CommentsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(CommentsApi, "className", {
        get: function () {
            return 'CommentsApi';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CommentsApi, "infos", {
        get: function () {
            return [
                {
                    class: CommentsApi,
                    url: "/rcms-api/1/topics/comments/delete",
                    requestMethodName: 'rcmsApi1TopicsCommentsDeletePost',
                    requestRequiredParamSample: {
                        inlineObject11: {},
                    },
                    requestParamInterfaceDescription: CommentsApiRcmsApi1TopicsCommentsDeletePostRequestDescription,
                },
                {
                    class: CommentsApi,
                    url: "/rcms-api/1/topics/comments",
                    requestMethodName: 'rcmsApi1TopicsCommentsGet',
                    requestRequiredParamSample: {
                        moduleId: {},
                    },
                    requestParamInterfaceDescription: CommentsApiRcmsApi1TopicsCommentsGetRequestDescription,
                },
                {
                    class: CommentsApi,
                    url: "/rcms-api/1/topics/comments/insert",
                    requestMethodName: 'rcmsApi1TopicsCommentsInsertPost',
                    requestRequiredParamSample: {
                        inlineObject9: {},
                    },
                    requestParamInterfaceDescription: CommentsApiRcmsApi1TopicsCommentsInsertPostRequestDescription,
                },
                {
                    class: CommentsApi,
                    url: "/rcms-api/1/topics/comments/update",
                    requestMethodName: 'rcmsApi1TopicsCommentsUpdatePost',
                    requestRequiredParamSample: {
                        inlineObject10: {},
                    },
                    requestParamInterfaceDescription: CommentsApiRcmsApi1TopicsCommentsUpdatePostRequestDescription,
                },
            ];
        },
        enumerable: true,
        configurable: true
    });
    /**
     *  ### **Comment::delete (v1)**   ## Controller parameters  > **use_module_type** `topics`
     */
    CommentsApi.prototype.rcmsApi1TopicsCommentsDeletePost = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var rcmsApi1TopicsCommentsDeletePostRaw;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        rcmsApi1TopicsCommentsDeletePostRaw = function (requestParameters) { return __awaiter(_this, void 0, void 0, function () {
                            var queryParameters, headerParameters, response;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (requestParameters === null || requestParameters === undefined) {
                                            throw new runtime.RequiredError('request parameter was null or undefined', [
                                                'request parameter was null or undefined when calling rcmsApi1TopicsCommentsDeletePost.',
                                                'This method requires parameters even if defined parameters are all optional (not required).',
                                                'In case of that, please specify empty Object.',
                                                'e.g. rcmsApi1TopicsCommentsDeletePost({})'
                                            ].join('\n'));
                                        }
                                        if (requestParameters.inlineObject11 === null || requestParameters.inlineObject11 === undefined) {
                                            throw new runtime.RequiredError('inlineObject11', 'Required parameter requestParameters.inlineObject11 was null or undefined when calling rcmsApi1TopicsCommentsDeletePost.');
                                        }
                                        queryParameters = {};
                                        if (requestParameters.outputFormat !== undefined) {
                                            queryParameters['_output_format'] = requestParameters.outputFormat;
                                        }
                                        if (requestParameters.lang !== undefined) {
                                            queryParameters['_lang'] = requestParameters.lang;
                                        }
                                        if (requestParameters.charset !== undefined) {
                                            queryParameters['_charset'] = requestParameters.charset;
                                        }
                                        headerParameters = {};
                                        headerParameters['Content-Type'] = 'application/json';
                                        if (this.configuration && this.configuration.apiKey) {
                                            headerParameters["X-RCMS-API-ACCESS-TOKEN"] = this.configuration.apiKey("X-RCMS-API-ACCESS-TOKEN"); // Token-Auth authentication
                                        }
                                        return [4 /*yield*/, this.request({
                                                path: "/rcms-api/1/topics/comments/delete",
                                                method: 'POST',
                                                headers: headerParameters,
                                                query: queryParameters,
                                                body: InlineObject11ToJSON(requestParameters.inlineObject11),
                                            })];
                                    case 1:
                                        response = _a.sent();
                                        return [2 /*return*/, new runtime.JSONApiResponse(response)];
                                }
                            });
                        }); };
                        return [4 /*yield*/, rcmsApi1TopicsCommentsDeletePostRaw(requestParameters)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     *  ### **Comment::list (v1)**   ## Controller parameters  > **module_type** `topics`
     */
    CommentsApi.prototype.rcmsApi1TopicsCommentsGet = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var rcmsApi1TopicsCommentsGetRaw;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        rcmsApi1TopicsCommentsGetRaw = function (requestParameters) { return __awaiter(_this, void 0, void 0, function () {
                            var queryParameters, headerParameters, response;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (requestParameters === null || requestParameters === undefined) {
                                            throw new runtime.RequiredError('request parameter was null or undefined', [
                                                'request parameter was null or undefined when calling rcmsApi1TopicsCommentsGet.',
                                                'This method requires parameters even if defined parameters are all optional (not required).',
                                                'In case of that, please specify empty Object.',
                                                'e.g. rcmsApi1TopicsCommentsGet({})'
                                            ].join('\n'));
                                        }
                                        if (requestParameters.moduleId === null || requestParameters.moduleId === undefined) {
                                            throw new runtime.RequiredError('moduleId', 'Required parameter requestParameters.moduleId was null or undefined when calling rcmsApi1TopicsCommentsGet.');
                                        }
                                        queryParameters = {};
                                        if (requestParameters.outputFormat !== undefined) {
                                            queryParameters['_output_format'] = requestParameters.outputFormat;
                                        }
                                        if (requestParameters.lang !== undefined) {
                                            queryParameters['_lang'] = requestParameters.lang;
                                        }
                                        if (requestParameters.charset !== undefined) {
                                            queryParameters['_charset'] = requestParameters.charset;
                                        }
                                        if (requestParameters.newOrderFlg !== undefined) {
                                            queryParameters['new_order_flg'] = requestParameters.newOrderFlg;
                                        }
                                        if (requestParameters.cnt !== undefined) {
                                            queryParameters['cnt'] = requestParameters.cnt;
                                        }
                                        if (requestParameters.pageID !== undefined) {
                                            queryParameters['pageID'] = requestParameters.pageID;
                                        }
                                        if (requestParameters.fromDate !== undefined) {
                                            queryParameters['from_date'] = requestParameters.fromDate;
                                        }
                                        if (requestParameters.toDate !== undefined) {
                                            queryParameters['to_date'] = requestParameters.toDate;
                                        }
                                        if (requestParameters.moduleId) {
                                            queryParameters['module_id[]'] = requestParameters.moduleId;
                                        }
                                        if (requestParameters.groupBy !== undefined) {
                                            queryParameters['groupBy'] = requestParameters.groupBy;
                                        }
                                        if (requestParameters.groupAs !== undefined) {
                                            queryParameters['groupAs'] = requestParameters.groupAs;
                                        }
                                        headerParameters = {};
                                        if (this.configuration && this.configuration.apiKey) {
                                            headerParameters["X-RCMS-API-ACCESS-TOKEN"] = this.configuration.apiKey("X-RCMS-API-ACCESS-TOKEN"); // Token-Auth authentication
                                        }
                                        return [4 /*yield*/, this.request({
                                                path: "/rcms-api/1/topics/comments",
                                                method: 'GET',
                                                headers: headerParameters,
                                                query: queryParameters,
                                            })];
                                    case 1:
                                        response = _a.sent();
                                        return [2 /*return*/, new runtime.JSONApiResponse(response)];
                                }
                            });
                        }); };
                        return [4 /*yield*/, rcmsApi1TopicsCommentsGetRaw(requestParameters)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     *  ### **Comment::insert (v1)**   ## Controller parameters  > **use_module_type** `topics`
     */
    CommentsApi.prototype.rcmsApi1TopicsCommentsInsertPost = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var rcmsApi1TopicsCommentsInsertPostRaw;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        rcmsApi1TopicsCommentsInsertPostRaw = function (requestParameters) { return __awaiter(_this, void 0, void 0, function () {
                            var queryParameters, headerParameters, response;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (requestParameters === null || requestParameters === undefined) {
                                            throw new runtime.RequiredError('request parameter was null or undefined', [
                                                'request parameter was null or undefined when calling rcmsApi1TopicsCommentsInsertPost.',
                                                'This method requires parameters even if defined parameters are all optional (not required).',
                                                'In case of that, please specify empty Object.',
                                                'e.g. rcmsApi1TopicsCommentsInsertPost({})'
                                            ].join('\n'));
                                        }
                                        if (requestParameters.inlineObject9 === null || requestParameters.inlineObject9 === undefined) {
                                            throw new runtime.RequiredError('inlineObject9', 'Required parameter requestParameters.inlineObject9 was null or undefined when calling rcmsApi1TopicsCommentsInsertPost.');
                                        }
                                        queryParameters = {};
                                        if (requestParameters.outputFormat !== undefined) {
                                            queryParameters['_output_format'] = requestParameters.outputFormat;
                                        }
                                        if (requestParameters.lang !== undefined) {
                                            queryParameters['_lang'] = requestParameters.lang;
                                        }
                                        if (requestParameters.charset !== undefined) {
                                            queryParameters['_charset'] = requestParameters.charset;
                                        }
                                        headerParameters = {};
                                        headerParameters['Content-Type'] = 'application/json';
                                        if (this.configuration && this.configuration.apiKey) {
                                            headerParameters["X-RCMS-API-ACCESS-TOKEN"] = this.configuration.apiKey("X-RCMS-API-ACCESS-TOKEN"); // Token-Auth authentication
                                        }
                                        return [4 /*yield*/, this.request({
                                                path: "/rcms-api/1/topics/comments/insert",
                                                method: 'POST',
                                                headers: headerParameters,
                                                query: queryParameters,
                                                body: InlineObject9ToJSON(requestParameters.inlineObject9),
                                            })];
                                    case 1:
                                        response = _a.sent();
                                        return [2 /*return*/, new runtime.JSONApiResponse(response)];
                                }
                            });
                        }); };
                        return [4 /*yield*/, rcmsApi1TopicsCommentsInsertPostRaw(requestParameters)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     *  ### **Comment::update (v1)**   ## Controller parameters  > **use_module_type** `topics`
     */
    CommentsApi.prototype.rcmsApi1TopicsCommentsUpdatePost = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var rcmsApi1TopicsCommentsUpdatePostRaw;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        rcmsApi1TopicsCommentsUpdatePostRaw = function (requestParameters) { return __awaiter(_this, void 0, void 0, function () {
                            var queryParameters, headerParameters, response;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (requestParameters === null || requestParameters === undefined) {
                                            throw new runtime.RequiredError('request parameter was null or undefined', [
                                                'request parameter was null or undefined when calling rcmsApi1TopicsCommentsUpdatePost.',
                                                'This method requires parameters even if defined parameters are all optional (not required).',
                                                'In case of that, please specify empty Object.',
                                                'e.g. rcmsApi1TopicsCommentsUpdatePost({})'
                                            ].join('\n'));
                                        }
                                        if (requestParameters.inlineObject10 === null || requestParameters.inlineObject10 === undefined) {
                                            throw new runtime.RequiredError('inlineObject10', 'Required parameter requestParameters.inlineObject10 was null or undefined when calling rcmsApi1TopicsCommentsUpdatePost.');
                                        }
                                        queryParameters = {};
                                        if (requestParameters.outputFormat !== undefined) {
                                            queryParameters['_output_format'] = requestParameters.outputFormat;
                                        }
                                        if (requestParameters.lang !== undefined) {
                                            queryParameters['_lang'] = requestParameters.lang;
                                        }
                                        if (requestParameters.charset !== undefined) {
                                            queryParameters['_charset'] = requestParameters.charset;
                                        }
                                        headerParameters = {};
                                        headerParameters['Content-Type'] = 'application/json';
                                        if (this.configuration && this.configuration.apiKey) {
                                            headerParameters["X-RCMS-API-ACCESS-TOKEN"] = this.configuration.apiKey("X-RCMS-API-ACCESS-TOKEN"); // Token-Auth authentication
                                        }
                                        return [4 /*yield*/, this.request({
                                                path: "/rcms-api/1/topics/comments/update",
                                                method: 'POST',
                                                headers: headerParameters,
                                                query: queryParameters,
                                                body: InlineObject10ToJSON(requestParameters.inlineObject10),
                                            })];
                                    case 1:
                                        response = _a.sent();
                                        return [2 /*return*/, new runtime.JSONApiResponse(response)];
                                }
                            });
                        }); };
                        return [4 /*yield*/, rcmsApi1TopicsCommentsUpdatePostRaw(requestParameters)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return CommentsApi;
}(runtime.BaseAPI));
export { CommentsApi };
