/* tslint:disable */
/* eslint-disable */
import { __awaiter, __extends, __generator } from "tslib";
/**
 * Test
 * test
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { InlineObject3Description, InlineObject3ToJSON, InlineObject4Description, InlineObject4ToJSON, } from '../models';
var usingModelsDescription = {
    InlineObject3: InlineObject3Description.split('\n').map(function (str) { return "  " + str; }).join('\n'),
    InlineObject4: InlineObject4Description.split('\n').map(function (str) { return "  " + str; }).join('\n'),
};
var TopicsApiRcmsApi1Topics1DeleteTopicsIdPostRequestDescription = (function (usingModelsDescription) { return "{\n    topicsId: number;\n    outputFormat?: string;\n    lang?: string;\n    charset?: string;\n}"; })(usingModelsDescription);
var TopicsApiRcmsApi1Topics1GetRequestDescription = (function (usingModelsDescription) { return "{\n    outputFormat?: string;\n    lang?: string;\n    charset?: string;\n    cnt?: number;\n    pageID?: number;\n    customSearchId?: string;\n    topicsKeyword?: string;\n    topicsKeywordCond?: string;\n    contentsType?: Array<number>;\n    contentsTypeCond?: string;\n    date?: string;\n    usingSeason?: string;\n    season?: number;\n    extColumnCond?: string;\n    excludeTopicsId?: string;\n    tagCategoryId?: number;\n    tagSearch?: string;\n    tagId?: Array<number>;\n    tagCond?: string;\n    excludeTagId?: string;\n    myFavoriteList?: number;\n    myCommentList?: number;\n    myOwnList?: string;\n    order?: string;\n    orderById?: string;\n    id?: Array<number>;\n}"; })(usingModelsDescription);
var TopicsApiRcmsApi1Topics1InsertPostRequestDescription = (function (usingModelsDescription) { return "{\n    inlineObject3: " + usingModelsDescription.InlineObject3 + ";\n    outputFormat?: string;\n    lang?: string;\n    charset?: string;\n}"; })(usingModelsDescription);
var TopicsApiRcmsApi1Topics1TopicsIdGetRequestDescription = (function (usingModelsDescription) { return "{\n    topicsId: number;\n    outputFormat?: string;\n    lang?: string;\n    charset?: string;\n}"; })(usingModelsDescription);
var TopicsApiRcmsApi1Topics1UpdateTopicsIdPostRequestDescription = (function (usingModelsDescription) { return "{\n    topicsId: number;\n    inlineObject4: " + usingModelsDescription.InlineObject4 + ";\n    outputFormat?: string;\n    lang?: string;\n    charset?: string;\n}"; })(usingModelsDescription);
/**
 * no description
 */
var TopicsApi = /** @class */ (function (_super) {
    __extends(TopicsApi, _super);
    function TopicsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(TopicsApi, "className", {
        get: function () {
            return 'TopicsApi';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TopicsApi, "infos", {
        get: function () {
            return [
                {
                    class: TopicsApi,
                    url: "/rcms-api/1/topics1/delete/{topics_id}".replace("{" + "topics_id" + "}", ''),
                    requestMethodName: 'rcmsApi1Topics1DeleteTopicsIdPost',
                    requestRequiredParamSample: {
                        topicsId: {},
                    },
                    requestParamInterfaceDescription: TopicsApiRcmsApi1Topics1DeleteTopicsIdPostRequestDescription,
                },
                {
                    class: TopicsApi,
                    url: "/rcms-api/1/topics1",
                    requestMethodName: 'rcmsApi1Topics1Get',
                    requestRequiredParamSample: {},
                    requestParamInterfaceDescription: TopicsApiRcmsApi1Topics1GetRequestDescription,
                },
                {
                    class: TopicsApi,
                    url: "/rcms-api/1/topics1/insert",
                    requestMethodName: 'rcmsApi1Topics1InsertPost',
                    requestRequiredParamSample: {
                        inlineObject3: {},
                    },
                    requestParamInterfaceDescription: TopicsApiRcmsApi1Topics1InsertPostRequestDescription,
                },
                {
                    class: TopicsApi,
                    url: "/rcms-api/1/topics1/{topics_id}".replace("{" + "topics_id" + "}", ''),
                    requestMethodName: 'rcmsApi1Topics1TopicsIdGet',
                    requestRequiredParamSample: {
                        topicsId: {},
                    },
                    requestParamInterfaceDescription: TopicsApiRcmsApi1Topics1TopicsIdGetRequestDescription,
                },
                {
                    class: TopicsApi,
                    url: "/rcms-api/1/topics1/update/{topics_id}".replace("{" + "topics_id" + "}", ''),
                    requestMethodName: 'rcmsApi1Topics1UpdateTopicsIdPost',
                    requestRequiredParamSample: {
                        topicsId: {}, inlineObject4: {},
                    },
                    requestParamInterfaceDescription: TopicsApiRcmsApi1Topics1UpdateTopicsIdPostRequestDescription,
                },
            ];
        },
        enumerable: true,
        configurable: true
    });
    /**
     *  ### **Topics::delete (v1)**
     */
    TopicsApi.prototype.rcmsApi1Topics1DeleteTopicsIdPost = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var rcmsApi1Topics1DeleteTopicsIdPostRaw;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        rcmsApi1Topics1DeleteTopicsIdPostRaw = function (requestParameters) { return __awaiter(_this, void 0, void 0, function () {
                            var queryParameters, headerParameters, response;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (requestParameters === null || requestParameters === undefined) {
                                            throw new runtime.RequiredError('request parameter was null or undefined', [
                                                'request parameter was null or undefined when calling rcmsApi1Topics1DeleteTopicsIdPost.',
                                                'This method requires parameters even if defined parameters are all optional (not required).',
                                                'In case of that, please specify empty Object.',
                                                'e.g. rcmsApi1Topics1DeleteTopicsIdPost({})'
                                            ].join('\n'));
                                        }
                                        if (requestParameters.topicsId === null || requestParameters.topicsId === undefined) {
                                            throw new runtime.RequiredError('topicsId', 'Required parameter requestParameters.topicsId was null or undefined when calling rcmsApi1Topics1DeleteTopicsIdPost.');
                                        }
                                        queryParameters = {};
                                        if (requestParameters.outputFormat !== undefined) {
                                            queryParameters['_output_format'] = requestParameters.outputFormat;
                                        }
                                        if (requestParameters.lang !== undefined) {
                                            queryParameters['_lang'] = requestParameters.lang;
                                        }
                                        if (requestParameters.charset !== undefined) {
                                            queryParameters['_charset'] = requestParameters.charset;
                                        }
                                        headerParameters = {};
                                        if (this.configuration && this.configuration.apiKey) {
                                            headerParameters["X-RCMS-API-ACCESS-TOKEN"] = this.configuration.apiKey("X-RCMS-API-ACCESS-TOKEN"); // Token-Auth authentication
                                        }
                                        return [4 /*yield*/, this.request({
                                                path: "/rcms-api/1/topics1/delete/{topics_id}".replace("{" + "topics_id" + "}", encodeURIComponent(String(requestParameters.topicsId))),
                                                method: 'POST',
                                                headers: headerParameters,
                                                query: queryParameters,
                                            })];
                                    case 1:
                                        response = _a.sent();
                                        return [2 /*return*/, new runtime.JSONApiResponse(response)];
                                }
                            });
                        }); };
                        return [4 /*yield*/, rcmsApi1Topics1DeleteTopicsIdPostRaw(requestParameters)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     *  ### **Topics::list (v1)**   ## Controller parameters  > **topics_group_id** `1`
     */
    TopicsApi.prototype.rcmsApi1Topics1Get = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var rcmsApi1Topics1GetRaw;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        rcmsApi1Topics1GetRaw = function (requestParameters) { return __awaiter(_this, void 0, void 0, function () {
                            var queryParameters, headerParameters, response;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (requestParameters === null || requestParameters === undefined) {
                                            throw new runtime.RequiredError('request parameter was null or undefined', [
                                                'request parameter was null or undefined when calling rcmsApi1Topics1Get.',
                                                'This method requires parameters even if defined parameters are all optional (not required).',
                                                'In case of that, please specify empty Object.',
                                                'e.g. rcmsApi1Topics1Get({})'
                                            ].join('\n'));
                                        }
                                        queryParameters = {};
                                        if (requestParameters.outputFormat !== undefined) {
                                            queryParameters['_output_format'] = requestParameters.outputFormat;
                                        }
                                        if (requestParameters.lang !== undefined) {
                                            queryParameters['_lang'] = requestParameters.lang;
                                        }
                                        if (requestParameters.charset !== undefined) {
                                            queryParameters['_charset'] = requestParameters.charset;
                                        }
                                        if (requestParameters.cnt !== undefined) {
                                            queryParameters['cnt'] = requestParameters.cnt;
                                        }
                                        if (requestParameters.pageID !== undefined) {
                                            queryParameters['pageID'] = requestParameters.pageID;
                                        }
                                        if (requestParameters.customSearchId !== undefined) {
                                            queryParameters['custom_search_id'] = requestParameters.customSearchId;
                                        }
                                        if (requestParameters.topicsKeyword !== undefined) {
                                            queryParameters['topics_keyword'] = requestParameters.topicsKeyword;
                                        }
                                        if (requestParameters.topicsKeywordCond !== undefined) {
                                            queryParameters['topics_keyword_cond'] = requestParameters.topicsKeywordCond;
                                        }
                                        if (requestParameters.contentsType) {
                                            queryParameters['contents_type[]'] = requestParameters.contentsType;
                                        }
                                        if (requestParameters.contentsTypeCond !== undefined) {
                                            queryParameters['contents_type_cond'] = requestParameters.contentsTypeCond;
                                        }
                                        if (requestParameters.date !== undefined) {
                                            queryParameters['date'] = requestParameters.date;
                                        }
                                        if (requestParameters.usingSeason !== undefined) {
                                            queryParameters['using_season'] = requestParameters.usingSeason;
                                        }
                                        if (requestParameters.season !== undefined) {
                                            queryParameters['season'] = requestParameters.season;
                                        }
                                        if (requestParameters.extColumnCond !== undefined) {
                                            queryParameters['ext_column_cond'] = requestParameters.extColumnCond;
                                        }
                                        if (requestParameters.excludeTopicsId !== undefined) {
                                            queryParameters['exclude_topics_id'] = requestParameters.excludeTopicsId;
                                        }
                                        if (requestParameters.tagCategoryId !== undefined) {
                                            queryParameters['tag_category_id'] = requestParameters.tagCategoryId;
                                        }
                                        if (requestParameters.tagSearch !== undefined) {
                                            queryParameters['tag_search'] = requestParameters.tagSearch;
                                        }
                                        if (requestParameters.tagId) {
                                            queryParameters['tag_id[]'] = requestParameters.tagId;
                                        }
                                        if (requestParameters.tagCond !== undefined) {
                                            queryParameters['tag_cond'] = requestParameters.tagCond;
                                        }
                                        if (requestParameters.excludeTagId !== undefined) {
                                            queryParameters['exclude_tag_id'] = requestParameters.excludeTagId;
                                        }
                                        if (requestParameters.myFavoriteList !== undefined) {
                                            queryParameters['my_favorite_list'] = requestParameters.myFavoriteList;
                                        }
                                        if (requestParameters.myCommentList !== undefined) {
                                            queryParameters['my_comment_list'] = requestParameters.myCommentList;
                                        }
                                        if (requestParameters.myOwnList !== undefined) {
                                            queryParameters['my_own_list'] = requestParameters.myOwnList;
                                        }
                                        if (requestParameters.order !== undefined) {
                                            queryParameters['order'] = requestParameters.order;
                                        }
                                        if (requestParameters.orderById !== undefined) {
                                            queryParameters['order_by_id'] = requestParameters.orderById;
                                        }
                                        if (requestParameters.id) {
                                            queryParameters['id[]'] = requestParameters.id;
                                        }
                                        headerParameters = {};
                                        if (this.configuration && this.configuration.apiKey) {
                                            headerParameters["X-RCMS-API-ACCESS-TOKEN"] = this.configuration.apiKey("X-RCMS-API-ACCESS-TOKEN"); // Token-Auth authentication
                                        }
                                        return [4 /*yield*/, this.request({
                                                path: "/rcms-api/1/topics1",
                                                method: 'GET',
                                                headers: headerParameters,
                                                query: queryParameters,
                                            })];
                                    case 1:
                                        response = _a.sent();
                                        return [2 /*return*/, new runtime.JSONApiResponse(response)];
                                }
                            });
                        }); };
                        return [4 /*yield*/, rcmsApi1Topics1GetRaw(requestParameters)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     *  ### **Topics::insert (v1)**   ## Controller parameters  > **topics_group_id** `1`
     */
    TopicsApi.prototype.rcmsApi1Topics1InsertPost = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var rcmsApi1Topics1InsertPostRaw;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        rcmsApi1Topics1InsertPostRaw = function (requestParameters) { return __awaiter(_this, void 0, void 0, function () {
                            var queryParameters, headerParameters, response;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (requestParameters === null || requestParameters === undefined) {
                                            throw new runtime.RequiredError('request parameter was null or undefined', [
                                                'request parameter was null or undefined when calling rcmsApi1Topics1InsertPost.',
                                                'This method requires parameters even if defined parameters are all optional (not required).',
                                                'In case of that, please specify empty Object.',
                                                'e.g. rcmsApi1Topics1InsertPost({})'
                                            ].join('\n'));
                                        }
                                        if (requestParameters.inlineObject3 === null || requestParameters.inlineObject3 === undefined) {
                                            throw new runtime.RequiredError('inlineObject3', 'Required parameter requestParameters.inlineObject3 was null or undefined when calling rcmsApi1Topics1InsertPost.');
                                        }
                                        queryParameters = {};
                                        if (requestParameters.outputFormat !== undefined) {
                                            queryParameters['_output_format'] = requestParameters.outputFormat;
                                        }
                                        if (requestParameters.lang !== undefined) {
                                            queryParameters['_lang'] = requestParameters.lang;
                                        }
                                        if (requestParameters.charset !== undefined) {
                                            queryParameters['_charset'] = requestParameters.charset;
                                        }
                                        headerParameters = {};
                                        headerParameters['Content-Type'] = 'application/json';
                                        if (this.configuration && this.configuration.apiKey) {
                                            headerParameters["X-RCMS-API-ACCESS-TOKEN"] = this.configuration.apiKey("X-RCMS-API-ACCESS-TOKEN"); // Token-Auth authentication
                                        }
                                        return [4 /*yield*/, this.request({
                                                path: "/rcms-api/1/topics1/insert",
                                                method: 'POST',
                                                headers: headerParameters,
                                                query: queryParameters,
                                                body: InlineObject3ToJSON(requestParameters.inlineObject3),
                                            })];
                                    case 1:
                                        response = _a.sent();
                                        return [2 /*return*/, new runtime.JSONApiResponse(response)];
                                }
                            });
                        }); };
                        return [4 /*yield*/, rcmsApi1Topics1InsertPostRaw(requestParameters)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     *  ### **Topics::details (v1)**   ## Controller parameters  > **topics_group_id** `1`
     */
    TopicsApi.prototype.rcmsApi1Topics1TopicsIdGet = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var rcmsApi1Topics1TopicsIdGetRaw;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        rcmsApi1Topics1TopicsIdGetRaw = function (requestParameters) { return __awaiter(_this, void 0, void 0, function () {
                            var queryParameters, headerParameters, response;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (requestParameters === null || requestParameters === undefined) {
                                            throw new runtime.RequiredError('request parameter was null or undefined', [
                                                'request parameter was null or undefined when calling rcmsApi1Topics1TopicsIdGet.',
                                                'This method requires parameters even if defined parameters are all optional (not required).',
                                                'In case of that, please specify empty Object.',
                                                'e.g. rcmsApi1Topics1TopicsIdGet({})'
                                            ].join('\n'));
                                        }
                                        if (requestParameters.topicsId === null || requestParameters.topicsId === undefined) {
                                            throw new runtime.RequiredError('topicsId', 'Required parameter requestParameters.topicsId was null or undefined when calling rcmsApi1Topics1TopicsIdGet.');
                                        }
                                        queryParameters = {};
                                        if (requestParameters.outputFormat !== undefined) {
                                            queryParameters['_output_format'] = requestParameters.outputFormat;
                                        }
                                        if (requestParameters.lang !== undefined) {
                                            queryParameters['_lang'] = requestParameters.lang;
                                        }
                                        if (requestParameters.charset !== undefined) {
                                            queryParameters['_charset'] = requestParameters.charset;
                                        }
                                        headerParameters = {};
                                        if (this.configuration && this.configuration.apiKey) {
                                            headerParameters["X-RCMS-API-ACCESS-TOKEN"] = this.configuration.apiKey("X-RCMS-API-ACCESS-TOKEN"); // Token-Auth authentication
                                        }
                                        return [4 /*yield*/, this.request({
                                                path: "/rcms-api/1/topics1/{topics_id}".replace("{" + "topics_id" + "}", encodeURIComponent(String(requestParameters.topicsId))),
                                                method: 'GET',
                                                headers: headerParameters,
                                                query: queryParameters,
                                            })];
                                    case 1:
                                        response = _a.sent();
                                        return [2 /*return*/, new runtime.JSONApiResponse(response)];
                                }
                            });
                        }); };
                        return [4 /*yield*/, rcmsApi1Topics1TopicsIdGetRaw(requestParameters)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     *  ### **Topics::update (v1)**   ## Controller parameters  > **topics_group_id** `1`
     */
    TopicsApi.prototype.rcmsApi1Topics1UpdateTopicsIdPost = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var rcmsApi1Topics1UpdateTopicsIdPostRaw;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        rcmsApi1Topics1UpdateTopicsIdPostRaw = function (requestParameters) { return __awaiter(_this, void 0, void 0, function () {
                            var queryParameters, headerParameters, response;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (requestParameters === null || requestParameters === undefined) {
                                            throw new runtime.RequiredError('request parameter was null or undefined', [
                                                'request parameter was null or undefined when calling rcmsApi1Topics1UpdateTopicsIdPost.',
                                                'This method requires parameters even if defined parameters are all optional (not required).',
                                                'In case of that, please specify empty Object.',
                                                'e.g. rcmsApi1Topics1UpdateTopicsIdPost({})'
                                            ].join('\n'));
                                        }
                                        if (requestParameters.topicsId === null || requestParameters.topicsId === undefined) {
                                            throw new runtime.RequiredError('topicsId', 'Required parameter requestParameters.topicsId was null or undefined when calling rcmsApi1Topics1UpdateTopicsIdPost.');
                                        }
                                        if (requestParameters.inlineObject4 === null || requestParameters.inlineObject4 === undefined) {
                                            throw new runtime.RequiredError('inlineObject4', 'Required parameter requestParameters.inlineObject4 was null or undefined when calling rcmsApi1Topics1UpdateTopicsIdPost.');
                                        }
                                        queryParameters = {};
                                        if (requestParameters.outputFormat !== undefined) {
                                            queryParameters['_output_format'] = requestParameters.outputFormat;
                                        }
                                        if (requestParameters.lang !== undefined) {
                                            queryParameters['_lang'] = requestParameters.lang;
                                        }
                                        if (requestParameters.charset !== undefined) {
                                            queryParameters['_charset'] = requestParameters.charset;
                                        }
                                        headerParameters = {};
                                        headerParameters['Content-Type'] = 'application/json';
                                        if (this.configuration && this.configuration.apiKey) {
                                            headerParameters["X-RCMS-API-ACCESS-TOKEN"] = this.configuration.apiKey("X-RCMS-API-ACCESS-TOKEN"); // Token-Auth authentication
                                        }
                                        return [4 /*yield*/, this.request({
                                                path: "/rcms-api/1/topics1/update/{topics_id}".replace("{" + "topics_id" + "}", encodeURIComponent(String(requestParameters.topicsId))),
                                                method: 'POST',
                                                headers: headerParameters,
                                                query: queryParameters,
                                                body: InlineObject4ToJSON(requestParameters.inlineObject4),
                                            })];
                                    case 1:
                                        response = _a.sent();
                                        return [2 /*return*/, new runtime.JSONApiResponse(response)];
                                }
                            });
                        }); };
                        return [4 /*yield*/, rcmsApi1Topics1UpdateTopicsIdPostRaw(requestParameters)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return TopicsApi;
}(runtime.BaseAPI));
export { TopicsApi };
